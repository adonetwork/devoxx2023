DEVOXX 2023
Des Tuyaux sur les pipelines.

Philippe Charriere
Pierre Antoine Gregoire.

Origines des pipelines CI/CD
Influence : Pratiques Agiles, TU,
Rythmes elevés dans le processus de livraison sur des périmètres restreints
Intégration Continue
On est plus en Waterfall et cela accelère le rythme de livraison et derrière la qualité des livraisons.

Fin année 90 / 2000 : Internet et Cloud
Emergence de la virtualisation
Matériel plus léger. 
Mise à l'échelle : Augmentation de machines / Augmentation des capacités des machines (RAM, CPU)

Au final l'infra est plus dynamique. 

Arrivée de DEVOPS (2007 / 2008)
Fait le lien entre les pratiques agiles et l'infra moderne
CALMS : Culture, Automatisation, Lean, Mesures, Sharing(Partage)

Continuous Integration (CI)
L'integration continue est une pratique de developpement logiciel ou les membres de l'équipe intégrent frequemment leurs travaux. Chaque changement déclenche la construction d'un livrable pret pour la production
La validation du livrable est faite au plus tot
Le déploiement de l'infra est testé en amont et préparé pour la livraison
Mais le déploiement en Production est toujours sujet à validation humaine. 

Continuous Deployment (CD)
Livraison continue ++ 
Cela nécessite un haut niveau d'automatisation. 
Etre capable aussi de revenir en arriere si problème.

Les pipelines = recettes de cuisine
Assemblage d'étapes de construction, validation, d'installation, déploiement, corrections, ....
Avoir des flux logiques automatisés avec des résultats prédictibles.

Pourquoi les pipelines
Trop de tests manuels
Feedback trop long
Déploiements manuels à partir de modes opératoires
manque de visibilité, controle et qualité
Besoin d'accelerer : réagir plus rapidemment aux changements fonctionnels et techniques
Une mise en Production devient un non evenement 

CI/CD
ETape 1 : Push du code. 
Buid / tests / deploy / end
Stage dans le temps et les jobs sont lancés en // dans le stage.
Merge Request = Pull Request

Solution indispensable : SCM 
Sur les commits appliquer les conventions de nommage. 
Utilisation des branches aura un impact sur le CI/CD. 
Ex 
Feature Branch = Une branche par évolution 
Release Branch = Branche ou on merge les fonctionnalités à livrer. 
HotFix Branch 

Tagging Strategy
Un tag est un pointeur annoté sur un commit particulier. 
On a une branche de release et on peut annoter des tags correspondants aux différentes versions. 
Si on doit appliquer un fix sur une version donnée, on créé une branche depuis un tag de version. 

Strategie de build 
Qu'est ce qui déclenche un build 
Chaque commit
Toutes les branches
chaque merge/pull request
un changement dans un répertoire
un tag
.....

Déclencher le build plus tôt et le plus frequemment possible. 

Git Pre-commit hook : Exemple de commits de base. 
Sur les revues de code : Conventionnel comments (ex bravo, magic, alerte, question, warning, ...

Etape 2 : Build
le build doit pouvoir etre exécuté en local et sur un serveur de CI
un build doit être portable / isolé / maitrisé.

Dans le build, on retrouve les TU et l'analyse du code. 
Il faut optimiser la phase de tests. les paralléliser s'ils sont assez isolés. utiliser des mocks ou simulateurs pour accelere l'étape de testing.

Taches de pipelines a exécuter dans des conteneurs
Un bon design des images utilisés est important. 














